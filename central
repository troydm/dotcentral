#!/usr/bin/env ruby
# encoding: utf-8

# -------------------------------------------------------------------------
# # central - dot files manager licensed under LGPLv3 (see LICENSE file)  |
# # written in Ruby by Dmitry Geurkov (d.geurkov@gmail.com)               |
# -------------------------------------------------------------------------

require 'erb'
require 'socket'

# get hostname
def hostname
    Socket.gethostname
end

# check all required tools
def checkTool(name,check)
    if !system("#{check} 2>&1 1>/dev/null")
        STDERR.puts "#{name} not found, please install it to use central"
        exit 1
    end
end

checkTool('file','file --version')
checkTool('grep','grep --version')
checkTool('ln','ln --version')
checkTool('readlink','readlink --version')
checkTool('git','git --version')

# tool commands
def sudo(command,sudo=false)
    if sudo
        sudo = 'sudo '
    else
        sudo = ''
    end
    command = sudo+command
    out = `#{command} 2>&1`
    # removing line feed
    if out.length > 0 && out[-1].ord == 10
        out = out[0...-1]
    end
    # removing cariage return
    if out.length > 0 && out[-1].ord == 13
        out = out[0...-1]
    end
    if out.downcase.end_with?('permission denied')
        if sudo
            STDERR.puts "Couldn't execute #{command} due to permission denied\nrun central with sudo privileges"
            exit 1
        else
            out = sudo(command,true)
        end
    end
    return out
end

def pwd
    Dir.pwd
end

def abs(path)
    File.absolute_path(File.expand_path(path))
end

def chdir(dir)
    Dir.chdir(abs(dir))
end

def file_exists?(path)
    path = abs(path)
    File.file?(path) && File.readable?(path)
end

def dir_exists?(path)
    path = abs(path)
    Dir.exists?(path)
end

def file_dir(path)
    File.dirname(abs(path))
end

def symlink?(symlink)
    sudo("file #{abs(symlink)}").downcase.include?('symbolic link')
end

def symlink_path(symlink)
    sudo("readlink #{abs(symlink)}")
end

def rm(path)
    path = abs(path)
    out = sudo("rm -f #{path}")
    puts "Removed file: #{path}"
end

def symlink(from,to)
    from = abs(from)
    to = abs(to)
    if symlink?(from)
        if symlink_path(from) != to
            rm from
            symlink from, to
        end
    elsif file_exists?(from)
        STDERR.puts "File #{from} exists in place of symlink..."
        exit 1
    else
        out = sudo("ln -s #{to} #{from}")
        puts "Created symlink: #{from} → #{to}"
    end
end

def git(url,path)
    path = abs(path)
    if dir_exists?(path)
        cwd = pwd()
        chdir path
        out = sudo('git pull')
        chdir cwd
    else
        out = sudo("git clone #{url} #{path}")
        puts "Git repository cloned: #{url} → #{path}"
    end
end

def source(file,source)
    file = abs(file)
    source = abs(source)
    source_line = "source #{source}"
    out = sudo("grep -Fx '#{source_line}' #{file}")
    if out == ""
        sudo("echo '#{source_line}' >> #{file}")
        puts "Added source #{source} line to #{file}"
    end
end

def erb(file,output_file = nil)
    file = abs(file)
    if output_file == nil
        if file.end_with?('.erb')
            output_file = file[0...-4]
        else
            output_file = file+'.out'
        end
    end
    if file_exists?(file)
        output = ERB.new(File.read(file)).result
        File.write(output_file,output)
        puts "Processed erb #{file} → #{output_file}"
    else
        STDERR.puts "Couldn't process erb file #{file}..."
        exit 1
    end
end

def run(file)
    cwd = pwd()
    file = abs(file)
    puts "Running configuration: "+file
    file_cwd = file_dir(file)
    chdir file_cwd
    load file
    chdir cwd
end

def run_if_exists(file)
    if file_exists?(file)
        run file
    end
end

if ARGV.length > 0
    ARGV.map {|configuration| run configuration }
else
    run 'configuration.rb'
end
