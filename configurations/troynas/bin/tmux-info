#!/usr/bin/env perl

use strict;
use warnings;
use HTTP::Request::Common qw(POST);
use LWP::UserAgent;
use LWP::Protocol::https;
use Proc::Daemon;
use File::Basename 'dirname';
use Cwd 'abs_path';
use List::Util qw(sum);

# cpu usage
my ($prev_idle, $prev_total) = qw(0 0);
sub cpu_usage() {
    open my $fh, '<', '/proc/stat';
    my $cpu = <$fh>;
    chop $cpu;
    close $fh;

    my @cpu = split /\s+/, $cpu;
    shift @cpu;
    my $idle = $cpu[3];
    my $total = sum(@cpu);

    my $diff_idle = $idle - $prev_idle;
    my $diff_total = $total - $prev_total;
    my $diff_usage = (1000 * ($diff_total - $diff_idle) / ($diff_total + 5)) / 10;

    $prev_idle = $idle;
    $prev_total = $total;

    return sprintf("%5.2f%%", $diff_usage);
}

# get pushover api key from enviroment variable
die 'pushover API key wasn\'t specified in PUSHOVER_API_KEY enviroment variable' unless exists $ENV{PUSHOVER_API_KEY};
die 'pushover User key wasn\'t specified in PUSHOVER_USER_KEY enviroment variable' unless exists $ENV{PUSHOVER_USER_KEY};
my $apikey = $ENV{PUSHOVER_API_KEY};
my $userkey = $ENV{PUSHOVER_USER_KEY};

sub notify {
    my ($info, $pri) = @_;
    LWP::UserAgent->new()->post(
        "https://api.pushover.net/1/messages.json", [
            token => $apikey,
            user => $userkey,
            title => 'troynas server tmux-info notification',
            message => $info,
            priority => "$pri",
            retry => '180',
            expire => '172800',
        ])->as_string;
}

if(@ARGV == 1 && $ARGV[0] eq 'notify-test'){
    print notify('This is notify test CPU:46.5°C 14.0°C MB:45.0°C RPM: CPU 1521 PSU 402 SSD:42°C 46°C HDD:45°C 42°C', 0);
    exit(0);
}

Proc::Daemon::Init;

# determine sata devices
my $ssd1dev = '/dev/sda';
my $ssd2dev = '/dev/sdd';
my $hdd1dev = '/dev/sdb';
my $hdd2dev = '/dev/sdc';
foreach (split "\n", `lsscsi`){
    my @a = split(" ", $_);
    if($_ =~ q/Samsung SSD 850/){
        $ssd1dev = pop(@a);
    }elsif($_ =~ q/TS128GSSD230S/){
        $ssd2dev = pop(@a);
    }elsif($_ =~ q/WDC WD4003FFBX-6/){
        $hdd1dev = pop(@a);
    }elsif($_ =~ q/HGST HDN726040AL/){
        $hdd2dev = pop(@a);
    }
}

my $continue = 1;
my $notified = 0;
my $critical = 0;

$SIG{TERM} = sub { $continue = 0; };
my $hdd1='35';
my $hdd2='35';
my $hddfree='';

sub render_widgets {
    my ($widgetsref, $ascii) = @_;
    my @widgets;
    my $deg = '';
    if ($ascii) {
        $deg = 'C';
    }
    foreach my $widget (@$widgetsref) {
        my $display = $widget->{display};
        if ($ascii) {
            $display =~ s/%icon%/$widget->{icon_ascii}/g;
        } else {
            $display =~ s/%icon%/$widget->{icon}/g;
        }
        $display =~ s/%deg%/$deg/g;
        push(@widgets, $display);
    }
    if ($ascii) {
        return "|".join("|", @widgets)."|";
    } else {
        return "".join("", @widgets)."";
    }
}

sub update {
    my $sys = `sensors`;

    my $cpu;
    my $core;
    my $mb;
    my $cpurpm;
    my $psurpm;

    foreach my $line (split "\n", $sys ){
        if($line =~ q/^temp1:\s+\+(\d+).\d+/){
            $core = $1;
        }
        if($line =~ q/^SYSTIN:\s+\+(\d+).\d+/){
            $mb = $1;
        }
        if($line =~ q/^CPUTIN:\s+\+(\d+.\d+)/){
            $cpu = $1;
        }
        if($line =~ q/^fan2:\s+(\d+)/){
            $cpurpm = $1;
        }
        if($line =~ q/^fan1:\s+(\d+)/){
            $psurpm = $1;
        }
    }

    if(time() % 300 == 0){
        my $hddtemp = `/usr/sbin/hddtemp --debug $hdd1dev | grep field\\(194\\)`;
        chop $hddtemp;
        if($hddtemp =~ q/\=\s+(\d+.?\d*)/){
            $hdd1 = $1;
        }

        $hddtemp = `/usr/sbin/hddtemp --debug $hdd2dev | grep field\\(194\\)`;
        chop $hddtemp;
        if($hddtemp =~ q/\=\s+(\d+.?\d*)/){
            $hdd2 = $1;
        }
    }
    if(time() % 10 == 0){
        $hddfree = `df -h /store | tail -1`;
        chop $hddfree;
        my @cols = split /\s+/, $hddfree;
        $hddfree = $cols[3];
    }

    my $ssd;
    my $ssdtemp = `/usr/sbin/hddtemp --debug $ssd1dev | grep field\\(190\\)`;
    chop $ssdtemp;
    if($ssdtemp =~ q/\=\s+(\d+.?\d*)/){
        $ssd = $1;
    }

    my $ssd2;
    $ssdtemp = `/usr/sbin/hddtemp --debug $ssd2dev | grep field\\(194\\)`;
    chop $ssdtemp;
    if($ssdtemp =~ q/\=\s+(\d+.?\d*)/){
        $ssd2 = $1;
    }

    my $cpu_usage = cpu_usage();
    my @widgets = (
        {
            icon => '',
            icon_ascii => 'cpu',
            alert => $cpu > 82 || $core > 78 || $mb > 65,
            critical => $cpu >= 85 || $core >= 85 || $mb >= 65,
            display => "%icon%:$cpu_usage $cpu%deg% $core%deg%"
        },
        {
            icon => '',
            icon_ascii => 'mb',
            alert => $mb > 60,
            critical => $mb >= 70,
            display => "%icon%:$mb%deg%"
        },
        {
            icon => '',
            icon_ascii => 'cpu_fan',
            alert => $cpurpm < 500,
            critical => $cpurpm < 500,
            display => "%icon%:$cpurpm"
        },
        {
            icon => '⏻',
            icon_ascii => 'psu_fan',
            alert => $psurpm < 350,
            critical => $psurpm < 350,
            display => "%icon%:$psurpm"
        },
        {
            icon => '',
            icon_ascii => 'ssd',
            alert => $ssd > 65 || $ssd2 > 75,
            critical => $ssd > 70 || $ssd2 > 75,
            display => "%icon%:$ssd%deg% $ssd2%deg%"
        },
        {
            icon => '',
            icon_ascii => 'hdd',
            alert => $hdd1 > 62 || $hdd2 > 62 || ($hddfree ne '' && $hddfree < 0.5),
            critical => 0,
            display => "%icon%:$hdd1%deg% $hdd2%deg% $hddfree"
        }
    );
    my $ret = render_widgets(\@widgets, 0);
    open my $fh, '>', '/tmp/tmux-info';
    print $fh $ret;
    close $fh;

    my @alerts;
    my @crits;
    foreach my $widget (@widgets) {
        if ($widget->{alert}) {
            push(@alerts, $widget->{icon_ascii}.' alert');
        }
        if ($widget->{critical}) {
            push(@crits, $widget->{icon_ascii}.' critical');
        }
    }

    if ((scalar @alerts) > 0) {
        if(!$notified){
            my $msg = render_widgets(\@widgets, 1);
            $msg .= ' [alerts: '.join(', ', @alerts).']';
            if ((scalar @crits) > 0) {
                $msg .= ' [crits: '.join(', ', @crits).']';
            }
            if (notify($msg, 0) =~ m/200 OK/) {
                $notified = 1;
            }
        }
    } else {
        $notified = 0;
    }

    if ((scalar @crits) > 0) {
        $critical++;
    } else {
        $critical = 0;
    }

    if($critical >= 30){
        my $msg = render_widgets(\@widgets, 1);
        $msg .= ' critical alerts timer went off, shutting down server';
        notify($msg, 2);
        system("cp /tmp/tmux-info /home/troydm/critical-shutdown.log");
        exec("sudo shutdown -h now");
    }

    return $ret;
}

while($continue){
    update;
    sleep 1;
}

